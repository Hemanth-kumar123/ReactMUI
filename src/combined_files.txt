```
React Components                     Redux                          API
+---------------------------+        +---------------------------+  +------------------+
|                           |        |                           |  |                  |
| MovieList Mounts          |        | Store Initialization      |  |                  |
| +---------------------+   |        | +---------------------+   |  |                  |
| | useSelector         |   |        | | Initial State:      |   |  |                  |
| | (Subscribe to       |<----------->| | movies: [],        |   |  |                  |
| |  movies state)      |   |        | | status: 'idle'      |   |  |                  |
| +---------------------+   |        | +---------------------+   |  |                  |
|           |               |        |                           |  |                  |
|           v               |        |                           |  |                  |
| +---------------------+   |        | +---------------------+   |  |                  |
| | Initial Render      |   |        | | Wait for Actions    |   |  |                  |
| | (Empty movie list)  |   |        | +---------------------+   |  |                  |
| +---------------------+   |        |           ^               |  |                  |
|           |               |        |           |               |  |                  |
|           v               |        | +---------------------+   |  |                  |
| +---------------------+   |        | | Action Received     |   |  |                  |
| | useEffect           |   |        | | (FETCH_MOVIES)      |   |  |                  |
| | (Dispatch           |---------->|| +---------------------+   |  |                  |
| |  FETCH_MOVIES)      |   |        |           |               |  |                  |
| +---------------------+   |        |           v               |  |                  |
|           |               |        | +---------------------+   |  |                  |
|        (wait)             |        | | Thunk Middleware    |   |  |                  |
|           |               |        | | Initiates API Call  |------------->| GET /movies   |
|           |               |        | +---------------------+   |  |                  |
|           |               |        |           |               |  |        |         |
|           |               |        |        (wait)             |  |        v         |
|           |               |        |           |               |  | Process Request  |
|           |               |        |           v               |  |        |         |
|           |               |        | +---------------------+   |  |        v         |
|           |               |        | | Receive API Response|<----------| Send Response |
|           |               |        | +---------------------+   |  |                  |
|           |               |        |           |               |  +------------------+
|           |               |        |           v               |
|           |               |        | +---------------------+   |
|           |               |        | | Reducer Processes   |   |
|           |               |        | | MOVIES_LOADED Action|   |
|           |               |        | +---------------------+   |
|           |               |        |           |               |
|           |               |        |           v               |
|           |               |        | +---------------------+   |
|           |               |        | | State Updated:      |   |
|           |               |        | | movies: [           |   |
|           |               |        | |   {id:1, title:     |   |
|           |               |        | |   "Inception",...}, |   |
|           |               |        | |   {id:2, title:     |   |
|           |               |        | |   "The Matrix",...} |   |
|           |               |        | | ],                  |   |
|           |               |        | | status: 'succeeded' |   |
|           |               |        | +---------------------+   |
|           |               |        |           |               |
|           v               |        |           v               |
| +---------------------+   |        | +---------------------+   |
| | State Change        |<-----------| | Notify Subscribers  |   |
| | Detected            |   |        | +---------------------+   |
| +---------------------+   |        |                           |
|           |               |        |                           |
|           v               |        |                           |
| +---------------------+   |        |                           |
| | Re-render           |   |        |                           |
| | (Show 2 movies)     |   |        |                           |
| +---------------------+   |        |                           |
|           |               |        |                           |
|           v               |        |                           |
| +---------------------+   |        |                           |
| | Update DOM          |   |        |                           |
| | (Display Inception  |   |        |                           |
| |  and The Matrix)    |   |        |                           |
| +---------------------+   |        |                           |
|                           |        |                           |
+---------------------------+        +---------------------------+

Explanation:

MovieList component mounts and subscribes to the movies state in Redux.
Initial render shows an empty list as the initial state has no movies.
useEffect dispatches a FETCH_MOVIES action.
Redux receives the action and the thunk middleware initiates an API call.
The API processes the request and sends back the response with two movies.
Redux receives the response and dispatches a MOVIES_LOADED action with the movie data.
The reducer processes this action, updating the state with the two movies and changing the status to 'succeeded'.
Redux notifies subscribers (our MovieList component) of the state change.
The MovieList component detects the state change via useSelector.
The component re-renders, now displaying the two movies (Inception and The Matrix).
The DOM is updated to show these two movies to the user.

This process demonstrates how the component, Redux, and the API work in parallel:

The component can render initially and wait for data without blocking.
Redux manages the state and handles the asynchronous API call.
The API processes the request independently.
Once data is received, it flows through Redux to the component, triggering a re-render with the new movie data.
```

Tutorial: Fetching Movies from TMDB API with React and Redux Toolkit

1. Set up the project

First, create a new React project using Create React App:

Install the necessary dependencies:

```bash
npm install @reduxjs/toolkit react-redux axios @mui/material @emotion/react @emotion/styled
```

2. Create the API service

Create a new file `src/services/tmdbApi.js`:

```javascript
import axios from "axios";

const BASE_URL = "https://api.themoviedb.org/3";
const API_KEY = "your_api_key_here"; // Replace with your TMDB API key

export const fetchPopularMovies = async () => {
  try {
    const response = await axios.get(
      `${BASE_URL}/movie/popular?api_key=${API_KEY}`
    );
    return response.data.results;
  } catch (error) {
    console.error("Error fetching popular movies:", error);
    throw error;
  }
};
```

3. Create the Redux slice

Create a new file `src/store/moviesSlice.js`:

```javascript
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { fetchPopularMovies } from "../services/tmdbApi";

export const getPopularMovies = createAsyncThunk(
  "movies/getPopular",
  async (_, { rejectWithValue }) => {
    try {
      return await fetchPopularMovies();
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

const moviesSlice = createSlice({
  name: "movies",
  initialState: {
    popularMovies: [],
    status: "idle",
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(getPopularMovies.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getPopularMovies.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.popularMovies = action.payload;
      })
      .addCase(getPopularMovies.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload;
      });
  },
});

export default moviesSlice.reducer;
```

4. Set up the Redux store

Create a new file `src/store/store.js`:

```javascript
import { configureStore } from "@reduxjs/toolkit";
import moviesReducer from "./moviesSlice";

export const store = configureStore({
  reducer: {
    movies: moviesReducer,
  },
});
```

5. Create the MovieList component

Create a new file `src/components/MovieList.js`:

```javascript
import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { getPopularMovies } from "../store/moviesSlice";
import {
  Grid,
  Card,
  CardMedia,
  CardContent,
  Typography,
  CircularProgress,
} from "@mui/material";

const MovieList = () => {
  const dispatch = useDispatch();
  const { popularMovies, status, error } = useSelector((state) => state.movies);

  useEffect(() => {
    if (status === "idle") {
      dispatch(getPopularMovies());
    }
  }, [status, dispatch]);

  if (status === "loading") {
    return <CircularProgress />;
  }

  if (status === "failed") {
    return <Typography color="error">Error: {error}</Typography>;
  }

  if (!popularMovies || popularMovies.length === 0) {
    return <Typography>No movies found.</Typography>;
  }

  return (
    <Grid container spacing={3}>
      {popularMovies.map((movie) => (
        <Grid item xs={12} sm={6} md={4} lg={3} key={movie.id}>
          <Card>
            <CardMedia
              component="img"
              height="140"
              image={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}
              alt={movie.title}
            />
            <CardContent>
              <Typography gutterBottom variant="h6" component="div">
                {movie.title}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Release Date: {movie.release_date}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default MovieList;
```

6. Update the App component

Update the `src/App.js` file:

```javascript
import React from "react";
import { Box } from "@mui/material";
import ButtonAppBar from "./AppBar";
import PermanentDrawerLeft from "./PermanentDrawer";
import { Provider } from "react-redux";
import { store } from "./store/store";
import Counter from "./components/usestatecounterbeautified";
import MovieList from "./components/MovieList";

function App() {
  return (
    <Provider store={store}>
      <Box sx={{ display: "flex" }}>
        <ButtonAppBar />
        <PermanentDrawerLeft />
        <Box
          component="main"
          sx={{
            flexGrow: 1,
            padding: 3,
            marginTop: "64px", // AppBar height
            marginLeft: "140px", // Drawer width
            display: "flex",
            justifyContent: "left",
            alignItems: "left",
            height: "calc(100vh - 64px)", // Full viewport height minus AppBar height
          }}
        >
          <MovieList />
        </Box>
      </Box>
    </Provider>
  );
}

export default App;
```

7. Run the application

Start the development server:

```bash
npm start
```

Now, let's break down what's happening in this implementation:

1. In `tmdbApi.js`, we define a function `fetchPopularMovies` that uses Axios to make an API call to TMDB and fetch popular movies.

2. In `moviesSlice.js`, we create a Redux slice using `createSlice` from Redux Toolkit. We also define an async thunk `getPopularMovies` using `createAsyncThunk`. This thunk calls our API service and handles the async operation.

3. The slice defines the initial state and uses `extraReducers` to handle the different states of the async operation (pending, fulfilled, rejected).

4. In `store.js`, we set up the Redux store and include our movies reducer.

5. The `MovieList` component is where we connect to the Redux store using hooks:

   - We use `useDispatch` to get the dispatch function and call our `getPopularMovies` thunk.
   - We use `useSelector` to access the movies state from the store.
   - In the `useEffect` hook, we dispatch the thunk if the status is 'idle'.
   - We render different UI based on the status (loading, error, or success).

6. Finally, in `App.js`, we wrap our application with the Redux `Provider` and render the `MovieList` component.

This implementation provides a solid foundation for fetching and displaying movies from the TMDB API. It handles loading and error states, and uses Material-UI components for styling. You can expand on this by adding more features like pagination, searching, or displaying movie details.

.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

import React from "react";
import { Box } from "@mui/material";
import ButtonAppBar from "./AppBar";
import PermanentDrawerLeft from "./PermanentDrawer";
import { Provider } from "react-redux";
import { store } from "./store/store";
import Counter from "./components/usestatecounterbeautified";
import MovieList from "./components/MovieList";

function App() {
  return (
    <Provider store={store}>
      <Box sx={{ display: "flex" }}>
        <ButtonAppBar />
        <PermanentDrawerLeft />
        <Box
          component="main"
          sx={{
            flexGrow: 1,
            padding: 3,
            marginTop: "64px", // AppBar height
            marginLeft: "140px", // Drawer width
            display: "flex",
            justifyContent: "left",
            alignItems: "left",
            height: "calc(100vh - 64px)", // Full viewport height minus AppBar height
          }}
        >
          <MovieList />
        </Box>
      </Box>
    </Provider>
  );
}

export default App;

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

import React from "react";
import { Provider } from "react-redux";
import { store } from "./store/apistore";
import { Counter } from "./components/Counter";

function App() {
  return (
    <Provider store={store}>
      <div className="App">
        <h1>Redux Counter App</h1>
        <Counter />
      </div>
    </Provider>
  );
}

export default App;

import React from "react";
import AppBar from "@mui/material/AppBar";
import Toolbar from "@mui/material/Toolbar";
import InputBase from "@mui/material/InputBase";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import SearchIcon from "@mui/icons-material/Search";
import PersonIcon from "@mui/icons-material/Person";

export default function ButtonAppBar() {
  return (
    <AppBar
      position="fixed"
      sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}
    >
      <Toolbar sx={{ justifyContent: "space-between" }}>
        <Box
          component="img"
          sx={{
            height: 60, // Increased from 64
            width: "auto",
            maxHeight: { xs: 50, sm: 60, md: 70 }, // Adjusted for different screen sizes
            maxWidth: { xs: 160, sm: 200, md: 240 }, // Adjusted for different screen sizes
            marginLeft: 2,
            marginY: 1, // Added vertical margin
          }}
          alt="Filmpire logo"
          src="/images/Academix-logo.png"
        />

        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            backgroundColor: "rgba(255, 255, 255, 0.15)",
            borderRadius: "4px",
            padding: "2px 8px",
            width: "40%",
          }}
        >
          <SearchIcon sx={{ color: "white", mr: 1 }} />
          <InputBase
            placeholder="Search for a Movie..."
            sx={{
              color: "white",
              "& ::placeholder": { color: "white", opacity: 0.7 },
              flexGrow: 1,
            }}
          />
        </Box>

        <Button
          color="inherit"
          startIcon={<PersonIcon />}
          sx={{
            backgroundColor: "rgba(255, 255, 255, 0.1)",
            "&:hover": { backgroundColor: "rgba(255, 255, 255, 0.2)" },
          }}
        >
          LOGIN
        </Button>
      </Toolbar>
    </AppBar>
  );
}

import os

def combine_files(directory, output_file):
    # Get all file names in the directory
    filenames = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]

    # Open the output file
    with open(output_file, 'w') as outfile:
        for fname in filenames:
            # Construct the full file path
            file_path = os.path.join(directory, fname)
            # Ensure that the file is not the output file itself
            if file_path == output_file:
                continue
            # Open and read each file
            with open(file_path, 'r') as readfile:
                # Write the content to the output file
                outfile.write(readfile.read() + '\n')  # Append a newline after each file's content

# Usage example
directory = '.'  # Replace this with your directory path
output_file = 'combined_files.txt'    # The name of the combined output file
combine_files(directory, output_file)

```
React Components                     Redux                          API
+---------------------------+        +---------------------------+  +------------------+
|                           |        |                           |  |                  |
| MovieList Mounts          |        | Store Initialization      |  |                  |
| +---------------------+   |        | +---------------------+   |  |                  |
| | useSelector         |   |        | | Initial State:      |   |  |                  |
| | (Subscribe to       |<----------->| | movies: [],        |   |  |                  |
| |  movies state)      |   |        | | status: 'idle'      |   |  |                  |
| +---------------------+   |        | +---------------------+   |  |                  |
|           |               |        |                           |  |                  |
|           v               |        |                           |  |                  |
| +---------------------+   |        | +---------------------+   |  |                  |
| | Initial Render      |   |        | | Wait for Actions    |   |  |                  |
| | (Empty movie list)  |   |        | +---------------------+   |  |                  |
| +---------------------+   |        |           ^               |  |                  |
|           |               |        |           |               |  |                  |
|           v               |        | +---------------------+   |  |                  |
| +---------------------+   |        | | Action Received     |   |  |                  |
| | useEffect           |   |        | | (FETCH_MOVIES)      |   |  |                  |
| | (Dispatch           |---------->|| +---------------------+   |  |                  |
| |  FETCH_MOVIES)      |   |        |           |               |  |                  |
| +---------------------+   |        |           v               |  |                  |
|           |               |        | +---------------------+   |  |                  |
|        (wait)             |        | | Thunk Middleware    |   |  |                  |
|           |               |        | | Initiates API Call  |------------->| GET /movies   |
|           |               |        | +---------------------+   |  |                  |
|           |               |        |           |               |  |        |         |
|           |               |        |        (wait)             |  |        v         |
|           |               |        |           |               |  | Process Request  |
|           |               |        |           v               |  |        |         |
|           |               |        | +---------------------+   |  |        v         |
|           |               |        | | Receive API Response|<----------| Send Response |
|           |               |        | +---------------------+   |  |                  |
|           |               |        |           |               |  +------------------+
|           |               |        |           v               |
|           |               |        | +---------------------+   |
|           |               |        | | Reducer Processes   |   |
|           |               |        | | MOVIES_LOADED Action|   |
|           |               |        | +---------------------+   |
|           |               |        |           |               |
|           |               |        |           v               |
|           |               |        | +---------------------+   |
|           |               |        | | State Updated:      |   |
|           |               |        | | movies: [           |   |
|           |               |        | |   {id:1, title:     |   |
|           |               |        | |   "Inception",...}, |   |
|           |               |        | |   {id:2, title:     |   |
|           |               |        | |   "The Matrix",...} |   |
|           |               |        | | ],                  |   |
|           |               |        | | status: 'succeeded' |   |
|           |               |        | +---------------------+   |
|           |               |        |           |               |
|           v               |        |           v               |
| +---------------------+   |        | +---------------------+   |
| | State Change        |<-----------| | Notify Subscribers  |   |
| | Detected            |   |        | +---------------------+   |
| +---------------------+   |        |                           |
|           |               |        |                           |
|           v               |        |                           |
| +---------------------+   |        |                           |
| | Re-render           |   |        |                           |
| | (Show 2 movies)     |   |        |                           |
| +---------------------+   |        |                           |
|           |               |        |                           |
|           v               |        |                           |
| +---------------------+   |        |                           |
| | Update DOM          |   |        |                           |
| | (Display Inception  |   |        |                           |
| |  and The Matrix)    |   |        |                           |
| +---------------------+   |        |                           |
|                           |        |                           |
+---------------------------+        +---------------------------+

Explanation:

MovieList component mounts and subscribes to the movies state in Redux.
Initial render shows an empty list as the initial state has no movies.
useEffect dispatches a FETCH_MOVIES action.
Redux receives the action and the thunk middleware initiates an API call.
The API processes the request and sends back the response with two movies.
Redux receives the response and dispatches a MOVIES_LOADED action with the movie data.
The reducer processes this action, updating the state with the two movies and changing the status to 'succeeded'.
Redux notifies subscribers (our MovieList component) of the state change.
The MovieList component detects the state change via useSelector.
The component re-renders, now displaying the two movies (Inception and The Matrix).
The DOM is updated to show these two movies to the user.

This process demonstrates how the component, Redux, and the API work in parallel:

The component can render initially and wait for data without blocking.
Redux manages the state and handles the asynchronous API call.
The API processes the request independently.
Once data is received, it flows through Redux to the component, triggering a re-render with the new movie data.
```

Tutorial: Fetching Movies from TMDB API with React and Redux Toolkit

1. Set up the project

First, create a new React project using Create React App:

Install the necessary dependencies:

```bash
npm install @reduxjs/toolkit react-redux axios @mui/material @emotion/react @emotion/styled
```

2. Create the API service

Create a new file `src/services/tmdbApi.js`:

```javascript
import axios from "axios";

const BASE_URL = "https://api.themoviedb.org/3";
const API_KEY = "your_api_key_here"; // Replace with your TMDB API key

export const fetchPopularMovies = async () => {
  try {
    const response = await axios.get(
      `${BASE_URL}/movie/popular?api_key=${API_KEY}`
    );
    return response.data.results;
  } catch (error) {
    console.error("Error fetching popular movies:", error);
    throw error;
  }
};
```

3. Create the Redux slice

Create a new file `src/store/moviesSlice.js`:

```javascript
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { fetchPopularMovies } from "../services/tmdbApi";

export const getPopularMovies = createAsyncThunk(
  "movies/getPopular",
  async (_, { rejectWithValue }) => {
    try {
      return await fetchPopularMovies();
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

const moviesSlice = createSlice({
  name: "movies",
  initialState: {
    popularMovies: [],
    status: "idle",
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(getPopularMovies.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getPopularMovies.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.popularMovies = action.payload;
      })
      .addCase(getPopularMovies.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload;
      });
  },
});

export default moviesSlice.reducer;
```

4. Set up the Redux store

Create a new file `src/store/store.js`:

```javascript
import { configureStore } from "@reduxjs/toolkit";
import moviesReducer from "./moviesSlice";

export const store = configureStore({
  reducer: {
    movies: moviesReducer,
  },
});
```

5. Create the MovieList component

Create a new file `src/components/MovieList.js`:

```javascript
import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { getPopularMovies } from "../store/moviesSlice";
import {
  Grid,
  Card,
  CardMedia,
  CardContent,
  Typography,
  CircularProgress,
} from "@mui/material";

const MovieList = () => {
  const dispatch = useDispatch();
  const { popularMovies, status, error } = useSelector((state) => state.movies);

  useEffect(() => {
    if (status === "idle") {
      dispatch(getPopularMovies());
    }
  }, [status, dispatch]);

  if (status === "loading") {
    return <CircularProgress />;
  }

  if (status === "failed") {
    return <Typography color="error">Error: {error}</Typography>;
  }

  if (!popularMovies || popularMovies.length === 0) {
    return <Typography>No movies found.</Typography>;
  }

  return (
    <Grid container spacing={3}>
      {popularMovies.map((movie) => (
        <Grid item xs={12} sm={6} md={4} lg={3} key={movie.id}>
          <Card>
            <CardMedia
              component="img"
              height="140"
              image={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}
              alt={movie.title}
            />
            <CardContent>
              <Typography gutterBottom variant="h6" component="div">
                {movie.title}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Release Date: {movie.release_date}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

export default MovieList;
```

6. Update the App component

Update the `src/App.js` file:

```javascript
import React from "react";
import { Box } from "@mui/material";
import ButtonAppBar from "./AppBar";
import PermanentDrawerLeft from "./PermanentDrawer";
import { Provider } from "react-redux";
import { store } from "./store/store";
import Counter from "./components/usestatecounterbeautified";
import MovieList from "./components/MovieList";

function App() {
  return (
    <Provider store={store}>
      <Box sx={{ display: "flex" }}>
        <ButtonAppBar />
        <PermanentDrawerLeft />
        <Box
          component="main"
          sx={{
            flexGrow: 1,
            padding: 3,
            marginTop: "64px", // AppBar height
            marginLeft: "140px", // Drawer width
            display: "flex",
            justifyContent: "left",
            alignItems: "left",
            height: "calc(100vh - 64px)", // Full viewport height minus AppBar height
          }}
        >
          <MovieList />
        </Box>
      </Box>
    </Provider>
  );
}

export default App;
```

7. Run the application

Start the development server:

```bash
npm start
```

Now, let's break down what's happening in this implementation:

1. In `tmdbApi.js`, we define a function `fetchPopularMovies` that uses Axios to make an API call to TMDB and fetch popular movies.

2. In `moviesSlice.js`, we create a Redux slice using `createSlice` from Redux Toolkit. We also define an async thunk `getPopularMovies` using `createAsyncThunk`. This thunk calls our API service and handles the async operation.

3. The slice defines the initial state and uses `extraReducers` to handle the different states of the async operation (pending, fulfilled, rejected).

4. In `store.js`, we set up the Redux store and include our movies reducer.

5. The `MovieList` component is where we connect to the Redux store using hooks:

   - We use `useDispatch` to get the dispatch function and call our `getPopularMovies` thunk.
   - We use `useSelector` to access the movies state from the store.
   - In the `useEffect` hook, we dispatch the thunk if the status is 'idle'.
   - We render different UI based on the status (loading, error, or success).

6. Finally, in `App.js`, we wrap our application with the Redux `Provider` and render the `MovieList` component.

This implementation provides a solid foundation for fetching and displaying movies from the TMDB API. It handles loading and error states, and uses Material-UI components for styling. You can expand on this by adding more features like pagination, searching, or displaying movie details.


1. First, let's create the auth slice (authSlice.js):

```javascript
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

// Simulated API call
const loginAPI = async (credentials) => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (
        credentials.username === "user" &&
        credentials.password === "password"
      ) {
        resolve({ id: 1, name: "John Doe", username: "user" });
      } else {
        reject("Invalid credentials");
      }
    }, 1000);
  });
};

export const login = createAsyncThunk(
  "auth/login",
  async (credentials, { rejectWithValue }) => {
    try {
      const user = await loginAPI(credentials);
      return user;
    } catch (error) {
      return rejectWithValue(error);
    }
  }
);

const authSlice = createSlice({
  name: "auth",
  initialState: {
    user: null,
    status: "idle",
    error: null,
  },
  reducers: {
    logout: (state) => {
      state.user = null;
      state.status = "idle";
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(login.pending, (state) => {
        state.status = "loading";
        state.error = null;
      })
      .addCase(login.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.user = action.payload;
      })
      .addCase(login.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.payload;
      });
  },
});

export const { logout } = authSlice.actions;
export default authSlice.reducer;
```

2. Next, let's set up the Redux store (store.js):

```javascript
import { configureStore } from "@reduxjs/toolkit";
import authReducer from "./authSlice";

export const store = configureStore({
  reducer: {
    auth: authReducer,
  },
});
```

3. Now, let's create a Login component (Login.js):

```javascript
import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { login } from "./authSlice";

const Login = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const dispatch = useDispatch();
  const { status, error } = useSelector((state) => state.auth);

  const handleSubmit = (e) => {
    e.preventDefault();
    dispatch(login({ username, password }));
  };

  if (status === "loading") {
    return <div>Logging in...</div>;
  }

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="username">Username:</label>
        <input
          type="text"
          id="username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="password">Password:</label>
        <input
          type="password"
          id="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
      </div>
      <button type="submit">Login</button>
      {error && <div style={{ color: "red" }}>{error}</div>}
    </form>
  );
};

export default Login;
```

4. Let's create a UserInfo component to display user information and logout button (UserInfo.js):

```javascript
import React from "react";
import { useDispatch, useSelector } from "react-redux";
import { logout } from "./authSlice";

const UserInfo = () => {
  const dispatch = useDispatch();
  const { user } = useSelector((state) => state.auth);

  if (!user) return null;

  return (
    <div>
      <h2>Welcome, {user.name}!</h2>
      <p>Username: {user.username}</p>
      <button onClick={() => dispatch(logout())}>Logout</button>
    </div>
  );
};

export default UserInfo;
```

5. Finally, let's create the main App component (App.js):

```javascript
import React from "react";
import { Provider } from "react-redux";
import { store } from "./store";
import Login from "./Login";
import UserInfo from "./UserInfo";

function App() {
  return (
    <Provider store={store}>
      <div className="App">
        <h1>Redux Login Example</h1>
        <Login />
        <UserInfo />
      </div>
    </Provider>
  );
}

export default App;
```

This implementation provides a complete login/logout functionality using Redux:

- The `authSlice` manages the authentication state, including the async login process and synchronous logout.
- The `Login` component allows users to input credentials and dispatches the login action.
- The `UserInfo` component displays user information when logged in and provides a logout button.
- The `App` component brings everything together and provides the Redux store to the entire application.

To test this:

1. Run the app and you'll see the login form.
2. Enter username "user" and password "password" to log in successfully.
3. You'll see the user information displayed and a logout button.
4. Click the logout button to log out.
5. Try incorrect credentials to see error handling in action.

This example demonstrates how to manage authentication state in Redux, handle async operations with createAsyncThunk, and connect React components to the Redux store using hooks like useSelector and useDispatch.

1. Initial Render:

When the MovieList component first renders:

```javascript
const MovieList = () => {
  const dispatch = useDispatch();
  const { popularMovies, status, error } = useSelector((state) => state.movies);

  // ... rest of the component
};
```

- `useDispatch` hook: This hook connects to the Redux store and returns the `dispatch` function. It doesn't cause any re-renders.

- `useSelector` hook: This hook runs and selects the current state from the Redux store. Initially, it might look like:
  ```javascript
  {
    popularMovies: [],
    status: 'idle',
    error: null
  }
  ```

2. useEffect Hook:

```javascript
useEffect(() => {
  if (status === "idle") {
    dispatch(getPopularMovies());
  }
}, [status, dispatch]);
```

- This hook runs after the initial render.
- It sees that `status` is 'idle', so it dispatches the `getPopularMovies` action.

3. Redux Thunk Middleware:

- The `getPopularMovies` thunk is executed.
- It immediately dispatches a pending action: `getPopularMovies.pending`

4. Redux Reducer:

- The pending action is handled in the moviesSlice:
  ```javascript
  .addCase(getPopularMovies.pending, (state) => {
    state.status = 'loading';
  })
  ```
- The state is updated: `status` changes from 'idle' to 'loading'.

5. React Re-render:

- The `useSelector` hook detects this state change and causes a re-render of MovieList.
- This time, when the component renders, it hits this condition:
  ```javascript
  if (status === "loading") {
    return <CircularProgress />;
  }
  ```
- A loading spinner is displayed to the user.

6. API Call Completes:

- The thunk's API call completes, returning data for two movies.
- The thunk dispatches a fulfilled action: `getPopularMovies.fulfilled`, with the movie data as payload.

7. Redux Reducer Again:

- The fulfilled action is handled:
  ```javascript
  .addCase(getPopularMovies.fulfilled, (state, action) => {
    state.status = 'succeeded';
    state.popularMovies = action.payload;
  })
  ```
- The state is updated: `status` becomes 'succeeded', and `popularMovies` is set to the array of two movies.

8. Another React Re-render:

- `useSelector` detects this state change and triggers another re-render.
- This time, the component skips the loading and error conditions and renders the movie grid:
  ```javascript
  return (
    <Grid container spacing={3}>
      {popularMovies.map((movie) => (
        <Grid item xs={12} sm={6} md={4} lg={3} key={movie.id}>
          <Card>{/* ... card contents ... */}</Card>
        </Grid>
      ))}
    </Grid>
  );
  ```
- Two movie cards are rendered, one for each movie returned by the API.

9. Completion:

- The component is now displaying the two movies, and the `status` in Redux is 'succeeded'.
- If the user navigates away and comes back, the `useEffect` hook won't dispatch a new action because the status is no longer 'idle'.

This process demonstrates how React hooks (`useEffect`, `useSelector`, `useDispatch`) work in tandem with Redux to manage state, handle asynchronous operations, and keep the UI in sync with the data state. The component efficiently re-renders only when necessary, showing appropriate loading states and finally the desired content.

Certainly! I'll create a text diagram to illustrate the flow of data and state changes in this React-Redux application. Let's follow the process step-by-step:

```
React Components                     Redux                          API
+---------------------------+        +---------------------------+  +------------------+
|                           |        |                           |  |                  |
| MovieList Mounts          |        | Store Initialization      |  |                  |
| +---------------------+   |        | +---------------------+   |  |                  |
| | useSelector         |   |        | | Initial State:      |   |  |                  |
| | (Subscribe to       |<----------->| | movies: [],        |   |  |                  |
| |  movies state)      |   |        | | status: 'idle'      |   |  |                  |
| +---------------------+   |        | +---------------------+   |  |                  |
|           |               |        |                           |  |                  |
|           v               |        |                           |  |                  |
| +---------------------+   |        | +---------------------+   |  |                  |
| | Initial Render      |   |        | | Wait for Actions    |   |  |                  |
| | (Empty movie list)  |   |        | +---------------------+   |  |                  |
| +---------------------+   |        |           ^               |  |                  |
|           |               |        |           |               |  |                  |
|           v               |        | +---------------------+   |  |                  |
| +---------------------+   |        | | Action Received     |   |  |                  |
| | useEffect           |   |        | | (FETCH_MOVIES)      |   |  |                  |
| | (Dispatch           |---------->|| +---------------------+   |  |                  |
| |  FETCH_MOVIES)      |   |        |           |               |  |                  |
| +---------------------+   |        |           v               |  |                  |
|           |               |        | +---------------------+   |  |                  |
|        (wait)             |        | | Thunk Middleware    |   |  |                  |
|           |               |        | | Initiates API Call  |------------->| GET /movies   |
|           |               |        | +---------------------+   |  |                  |
|           |               |        |           |               |  |        |         |
|           |               |        |        (wait)             |  |        v         |
|           |               |        |           |               |  | Process Request  |
|           |               |        |           v               |  |        |         |
|           |               |        | +---------------------+   |  |        v         |
|           |               |        | | Receive API Response|<----------| Send Response |
|           |               |        | +---------------------+   |  |                  |
|           |               |        |           |               |  +------------------+
|           |               |        |           v               |
|           |               |        | +---------------------+   |
|           |               |        | | Reducer Processes   |   |
|           |               |        | | MOVIES_LOADED Action|   |
|           |               |        | +---------------------+   |
|           |               |        |           |               |
|           |               |        |           v               |
|           |               |        | +---------------------+   |
|           |               |        | | State Updated:      |   |
|           |               |        | | movies: [           |   |
|           |               |        | |   {id:1, title:     |   |
|           |               |        | |   "Inception",...}, |   |
|           |               |        | |   {id:2, title:     |   |
|           |               |        | |   "The Matrix",...} |   |
|           |               |        | | ],                  |   |
|           |               |        | | status: 'succeeded' |   |
|           |               |        | +---------------------+   |
|           |               |        |           |               |
|           v               |        |           v               |
| +---------------------+   |        | +---------------------+   |
| | State Change        |<-----------| | Notify Subscribers  |   |
| | Detected            |   |        | +---------------------+   |
| +---------------------+   |        |                           |
|           |               |        |                           |
|           v               |        |                           |
| +---------------------+   |        |                           |
| | Re-render           |   |        |                           |
| | (Show 2 movies)     |   |        |                           |
| +---------------------+   |        |                           |
|           |               |        |                           |
|           v               |        |                           |
| +---------------------+   |        |                           |
| | Update DOM          |   |        |                           |
| | (Display Inception  |   |        |                           |
| |  and The Matrix)    |   |        |                           |
| +---------------------+   |        |                           |
|                           |        |                           |
+---------------------------+        +---------------------------+
```

Explanation:

1. MovieList component mounts and subscribes to the movies state in Redux.
2. Initial render shows an empty list as the initial state has no movies.
3. useEffect dispatches a FETCH_MOVIES action.
4. Redux receives the action and the thunk middleware initiates an API call.
5. The API processes the request and sends back the response with two movies.
6. Redux receives the response and dispatches a MOVIES_LOADED action with the movie data.
7. The reducer processes this action, updating the state with the two movies and changing the status to 'succeeded'.
8. Redux notifies subscribers (our MovieList component) of the state change.
9. The MovieList component detects the state change via useSelector.
10. The component re-renders, now displaying the two movies (Inception and The Matrix).
11. The DOM is updated to show these two movies to the user.

This process demonstrates how the component, Redux, and the API work in parallel:

- The component can render initially and wait for data without blocking.
- Redux manages the state and handles the asynchronous API call.
- The API processes the request independently.
- Once data is received, it flows through Redux to the component, triggering a re-render with the new movie data.

###########################

You're right, it's helpful to include the file information. I'll update the text diagram to show where each part of the code is defined. Here's the revised version:

```
React Components                     Redux                          API
+---------------------------+        +---------------------------+  +------------------+
| (src/components/          |        | (src/store/store.js,      |  | (src/services/   |
|  MovieList.js)            |        |  src/store/moviesSlice.js)|  |  tmdbApi.js)     |
|                           |        |                           |  |                  |
| MovieList Mounts          |        | Store Initialization      |  |                  |
| +---------------------+   |        | +---------------------+   |  |                  |
| | useSelector         |   |        | | Initial State:      |   |  |                  |
| | (Subscribe to       |<----------->| | movies: [],        |   |  |                  |
| |  movies state)      |   |        | | status: 'idle'      |   |  |                  |
| +---------------------+   |        | +---------------------+   |  |                  |
|           |               |        |                           |  |                  |
|           v               |        |                           |  |                  |
| +---------------------+   |        | +---------------------+   |  |                  |
| | Initial Render      |   |        | | Wait for Actions    |   |  |                  |
| | (Empty movie list)  |   |        | +---------------------+   |  |                  |
| +---------------------+   |        |           ^               |  |                  |
|           |               |        |           |               |  |                  |
|           v               |        | +---------------------+   |  |                  |
| +---------------------+   |        | | Action Received     |   |  |                  |
| | useEffect           |   |        | | (FETCH_MOVIES)      |   |  |                  |
| | (Dispatch           |---------->|| +---------------------+   |  |                  |
| |  FETCH_MOVIES)      |   |        |           |               |  |                  |
| +---------------------+   |        |           v               |  |                  |
|           |               |        | +---------------------+   |  |                  |
|        (wait)             |        | | Thunk Middleware    |   |  |                  |
|           |               |        | | Initiates API Call  |------------->| GET /movies   |
|           |               |        | +---------------------+   |  |                  |
|           |               |        |           |               |  |        |         |
|           |               |        |        (wait)             |  |        v         |
|           |               |        |           |               |  | Process Request  |
|           |               |        |           v               |  |        |         |
|           |               |        | +---------------------+   |  |        v         |
|           |               |        | | Receive API Response|<----------| Send Response |
|           |               |        | +---------------------+   |  |                  |
|           |               |        |           |               |  +------------------+
|           |               |        |           v               |
|           |               |        | +---------------------+   |
|           |               |        | | Reducer Processes   |   |
|           |               |        | | MOVIES_LOADED Action|   |
|           |               |        | +---------------------+   |
|           |               |        |           |               |
|           |               |        |           v               |
|           |               |        | +---------------------+   |
|           |               |        | | State Updated:      |   |
|           |               |        | | movies: [           |   |
|           |               |        | |   {id:1, title:     |   |
|           |               |        | |   "Inception",...}, |   |
|           |               |        | |   {id:2, title:     |   |
|           |               |        | |   "The Matrix",...} |   |
|           |               |        | | ],                  |   |
|           |               |        | | status: 'succeeded' |   |
|           |               |        | +---------------------+   |
|           |               |        |           |               |
|           v               |        |           v               |
| +---------------------+   |        | +---------------------+   |
| | State Change        |<-----------| | Notify Subscribers  |   |
| | Detected            |   |        | +---------------------+   |
| +---------------------+   |        |                           |
|           |               |        |                           |
|           v               |        |                           |
| +---------------------+   |        |                           |
| | Re-render           |   |        |                           |
| | (Show 2 movies)     |   |        |                           |
| +---------------------+   |        |                           |
|           |               |        |                           |
|           v               |        |                           |
| +---------------------+   |        |                           |
| | Update DOM          |   |        |                           |
| | (Display Inception  |   |        |                           |
| |  and The Matrix)    |   |        |                           |
| +---------------------+   |        |                           |
|                           |        |                           |
+---------------------------+        +---------------------------+

App Component (src/App.js):
Wraps everything with Redux Provider and renders MovieList
```

File Breakdown:

1. `src/components/MovieList.js`: Contains the MovieList component, useEffect hook, and rendering logic.
2. `src/store/store.js`: Configures the Redux store.
3. `src/store/moviesSlice.js`: Defines the movies slice with initial state, reducers, and async thunk.
4. `src/services/tmdbApi.js`: Contains the API call function to fetch movies.
5. `src/App.js`: The main App component that provides the Redux store and renders MovieList.

This diagram now shows where each part of the code is defined, making it easier to understand the file structure and responsibilities in the application.

Exactly! You've captured the flow perfectly. Let's break it down step-by-step to reinforce your understanding:

1. App.js and Counter Component:

   ```
   App.js
     |
     +-- Counter Component
   ```

2. Counter Component Hooks:

   ```
   Counter Component
     |
     +-- useEffect
     |
     +-- useDispatch (Redux)
     |
     +-- useSelector (Redux)
   ```

3. Initial State Check and Dispatch:

   ```
   useEffect
     |
     +-- Check state (idle?)
         |
         +-- If idle: useDispatch activates
             |
             +-- Sends action to Redux
   ```

4. Redux State Management:

   ```
   Redux Store
     |
     +-- Receives dispatched action
         |
         +-- Triggers API call (thunk)
         |
         +-- API responds
         |
         +-- Extra reducers update state based on response
   ```

5. Component Update:
   ```
   useSelector
     |
     +-- Watches for state changes
         |
         +-- Triggers re-render based on new state
             |
             +-- Component displays appropriate UI based on status
   ```

This flow demonstrates the core principles of React-Redux integration:

1. Separation of Concerns: The component focuses on display and user interaction, while Redux manages state.
2. Unidirectional Data Flow: Actions are dispatched to Redux, state is updated, and components react to these changes.
3. Centralized State Management: All state changes go through Redux, making it easier to track and manage application state.

########

1. Q: What function from Redux Toolkit is used to create the store, and what is its main purpose?
   A: The `configureStore` function is used to create the store. Its main purpose is to simplify the store setup process, automatically combining reducers, adding middleware, and setting up the Redux DevTools extension.

2. Q: In the store configuration, what does the 'reducer' key represent?
   A: The 'reducer' key in the store configuration represents the root reducer for the entire Redux store. It combines all the individual reducers for different slices of state.

3. Q: If we have `counter: counterReducer` in the store configuration, how would you access the counter state in a component using useSelector?
   A: `const counterState = useSelector(state => state.counter);`

4. Q: What is the purpose of the `createSlice` function, and what are its main parameters?
   A: `createSlice` is used to create a slice of Redux state. Its main parameters are:

   - name: A string name for the slice
   - initialState: The initial state value
   - reducers: An object of reducer functions
   - extraReducers: A builder callback for additional reducers (often used with async actions)

5. Q: In a slice created with `createSlice`, what's the difference between `reducers` and `extraReducers`?
   A: `reducers` are for synchronous actions and automatically generate action creators. `extraReducers` are for handling actions defined elsewhere (like async thunks) and don't generate action creators.

6. Q: What is an async thunk, and how is it created?
   A: An async thunk is a function that handles asynchronous logic in Redux. It's created using `createAsyncThunk`, which takes an action type string and a payload creator function that returns a promise.

7. Q: How does `useEffect` in the Counter component relate to the Redux state and actions?
   A: The `useEffect` in the Counter component checks the status of the Redux state and dispatches the initial fetch action if the status is 'idle'.

8. Q: If you dispatch an action created by `createSlice`, do you need to manually write a case for it in `extraReducers`?
   A: No, you don't need to manually write cases in `extraReducers` for actions created by `createSlice`. These are handled automatically in the `reducers` section.

9. Q: What are the possible status values we're using in our state, and what do they represent?
   A: The status values are:

   - 'idle': Initial state, no fetch has been attempted
   - 'loading': A fetch is in progress
   - 'succeeded': The fetch was successful
   - 'failed': The fetch failed

10. Q: If you wanted to add a new piece of state, let's say 'user', how would you modify the store configuration?
    A:

    ```javascript
    export const store = configureStore({
      reducer: {
        counter: counterReducer,
        user: userReducer,
      },
    });
    ```

11. Q: In the component, what's the difference between using `useSelector` and `useDispatch`?
    A: `useSelector` is used to select and read data from the Redux store state. `useDispatch` returns the dispatch function, which is used to dispatch actions to the store.

12. Q: How would you add a new user reducer to the existing store configuration?
    A:

    ```javascript
    import userReducer from "./userSlice";

    export const store = configureStore({
      reducer: {
        counter: counterReducer,
        user: userReducer,
      },
    });
    ```

13. Q: In a component, how would you dispatch the fetchUser action, and what argument would it take?
    A:

    ```javascript
    const dispatch = useDispatch();
    dispatch(fetchUser(userId));
    ```

    It takes a userId as an argument.

14. Q: How does the logout action in the userSlice differ from the fetchUser action in terms of how it's defined and used?
    A: The logout action is a synchronous action defined in the `reducers` section of the slice, while fetchUser is an asynchronous action created with createAsyncThunk. logout can be dispatched directly, while fetchUser handles async logic.

15. Q: If you wanted to display the user's name in a component, assuming it's stored in state.user.data.name, how would you do this using useSelector?
    A:

    ```javascript
    const userName = useSelector((state) => state.user.data?.name);
    ```

16. Q: How would you conditionally render a loading spinner while the user data is being fetched?
    A:

    ```javascript
    const userStatus = useSelector((state) => state.user.status);
    if (userStatus === "loading") {
      return <LoadingSpinner />;
    }
    ```

17. Q: In the userSlice, what's the purpose of having both `reducers` and `extraReducers`?
    A: In the userSlice, `reducers` is for synchronous actions (like logout), while `extraReducers` handles async action states (like the different states of fetchUser).

18. Q: How would you handle an error that occurred during the fetchUser action in your component?
    A:

    ```javascript
    const userError = useSelector((state) => state.user.error);
    if (userError) {
      return <ErrorMessage message={userError} />;
    }
    ```

19. Q: If you wanted to prevent multiple unnecessary fetches of user data, how could you modify the component and/or the slice to achieve this?
    A:

    ```javascript
    useEffect(() => {
      if (status === "idle") {
        dispatch(fetchUser(userId));
      }
    }, [status, userId, dispatch]);
    ```

20. Q: How can you combine multiple reducers when setting up the Redux store?
    A: You can combine multiple reducers by passing an object to the `reducer` key in `configureStore`, where each key-value pair represents a slice of state and its corresponding reducer:
    ```javascript
    export const store = configureStore({
      reducer: {
        counter: counterReducer,
        user: userReducer,
        posts: postsReducer,
      },
    });
    ```

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
    monospace;
}

@font-face {
  font-family: "Playwrite MX";
  src: url("/public/fonts/PlaywriteMX-VariableFont_wght.ttf")
    format("truetype-variations");
  font-weight: 100 900;
  font-style: normal;
}


import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App2";
import reportWebVitals from "./reportWebVitals";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

const movie = {
  title: "Inception",
  year: 2010,
  director: "Christopher Nolan",
};

const { title, year } = movie;
console.log(title);
console.log(year);

const [firstMovie, secondMovie] = movies;
console.log(firstMovie);
console.log(secondMovie);

<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
let x = 10;
const y = 100;

console.log(y);

import React from "react";
import Box from "@mui/material/Box";
import Drawer from "@mui/material/Drawer";
import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
import ListItemButton from "@mui/material/ListItemButton";
import ListItemIcon from "@mui/material/ListItemIcon";
import ListItemText from "@mui/material/ListItemText";
import Typography from "@mui/material/Typography";
import Divider from "@mui/material/Divider";

// Import necessary icons
import MovieIcon from "@mui/icons-material/Movie";
import StarIcon from "@mui/icons-material/Star";
import UpcomingIcon from "@mui/icons-material/Upcoming";
import LocalMoviesIcon from "@mui/icons-material/LocalMovies";
import EmojiEmotionsIcon from "@mui/icons-material/EmojiEmotions";
import TheatersIcon from "@mui/icons-material/Theaters";
import DirectionsRunIcon from "@mui/icons-material/DirectionsRun";
import AutoFixHighIcon from "@mui/icons-material/AutoFixHigh";
import ChildCareIcon from "@mui/icons-material/ChildCare";
import PsychologyIcon from "@mui/icons-material/Psychology";
import HistoryEduIcon from "@mui/icons-material/HistoryEdu";
import BloodtypeIcon from "@mui/icons-material/Bloodtype";
import MusicNoteIcon from "@mui/icons-material/MusicNote";

const drawerWidth = 240;

const categories = [
  { name: "Popular", icon: <MovieIcon /> },
  { name: "Top Rated", icon: <StarIcon /> },
  { name: "Upcoming", icon: <UpcomingIcon /> },
];

const genres = [
  { name: "Action", icon: <DirectionsRunIcon /> },
  { name: "Adventure", icon: <AutoFixHighIcon /> },
  { name: "Animation", icon: <ChildCareIcon /> },
  { name: "Comedy", icon: <EmojiEmotionsIcon /> },
  { name: "Crime", icon: <LocalMoviesIcon /> },
  { name: "Documentary", icon: <TheatersIcon /> },
  { name: "Drama", icon: <PsychologyIcon /> },
  { name: "Family", icon: <ChildCareIcon /> },
  { name: "Fantasy", icon: <AutoFixHighIcon /> },
  { name: "History", icon: <HistoryEduIcon /> },
  { name: "Horror", icon: <BloodtypeIcon /> },
  { name: "Music", icon: <MusicNoteIcon /> },
];

const drawerBg = "#0d253f";
const textColor = "#01b4e4";
const hoverBg = "#01b4e4";
const hoverText = "#ffffff";
const dividerColor = "#01b4e4";

export default function PermanentDrawerLeft() {
  return (
    <Drawer
      sx={{
        width: drawerWidth,
        flexShrink: 0,
        "& .MuiDrawer-paper": {
          width: drawerWidth,
          boxSizing: "border-box",
          backgroundColor: drawerBg,
          color: textColor,
          top: 64,
          height: "calc(100% - 64px)",
        },
      }}
      variant="permanent"
      anchor="left"
    >
      <Box sx={{ overflow: "auto", mt: 2 }}>
        <Typography
          variant="subtitle1"
          sx={{
            px: 2,
            py: 1,
            fontFamily: '"Playwrite MX", Arial, sans-serif',
            fontWeight: 600,
            fontSize: "20px",
            color: "#90cea1",
          }}
        >
          Categories
        </Typography>
        <List>
          {categories.map((item) => (
            <ListItem key={item.name} disablePadding>
              <ListItemButton
                sx={{
                  "&:hover": {
                    backgroundColor: hoverBg,
                    "& .MuiListItemIcon-root, & .MuiTypography-root": {
                      color: hoverText,
                    },
                  },
                }}
              >
                <ListItemIcon sx={{ color: textColor, minWidth: 40 }}>
                  {item.icon}
                </ListItemIcon>
                <ListItemText
                  primary={item.name}
                  sx={{
                    "& .MuiTypography-root": {
                      fontFamily: '"Playwrite MX", Arial, sans-serif',
                      fontWeight: 400,
                    },
                  }}
                />
              </ListItemButton>
            </ListItem>
          ))}
        </List>
        <Divider sx={{ my: 1, backgroundColor: dividerColor }} />
        <Typography
          variant="subtitle1"
          sx={{
            px: 2,
            py: 1,
            fontFamily: '"Playwrite MX", Arial, sans-serif',
            fontWeight: 600,
            fontSize: "20px",
            color: "#90cea1",
          }}
        >
          Genres
        </Typography>
        <List>
          {genres.map((item) => (
            <ListItem key={item.name} disablePadding>
              <ListItemButton
                sx={{
                  "&:hover": {
                    backgroundColor: hoverBg,
                    "& .MuiListItemIcon-root, & .MuiTypography-root": {
                      color: hoverText,
                    },
                  },
                }}
              >
                <ListItemIcon sx={{ color: textColor, minWidth: 40 }}>
                  {item.icon}
                </ListItemIcon>
                <ListItemText
                  primary={item.name}
                  sx={{
                    "& .MuiTypography-root": {
                      fontFamily: '"Playwrite MX", Arial, sans-serif',
                      fontWeight: 400,
                    },
                  }}
                />
              </ListItemButton>
            </ListItem>
          ))}
        </List>
      </Box>
    </Drawer>
  );
}


const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

// src/tmdbConfig.js
export const TMDB_API_KEY = "49a5508b99e54cbf67438655e1565e32";
export const TMDB_BASE_URL = "https://api.themoviedb.org/3";

